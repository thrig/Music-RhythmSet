#!/usr/bin/env perl
#
# beatinator - generates three voices that vary their rhythmic patterns
# over time. MIDI output and a text log of the changes are produced

use 5.24.0;
use warnings;
use Music::RhythmSet;
use Music::RhythmSet::Util qw(beatstring filter_pattern);

my $filename = shift // die "Usage: $0 midi-file [measure-count]\n";
my $measures = shift // 64;
# all voices use the same number of beats per measure (this need not be
# true but would make the "measures" harder to line up between voices)
my $BPM  = 16;
my $rest = [ (0) x $BPM ];

# each voice has a consistent (but different) number of onsets per
# measure. those with more onsets are given more trials to lower
# the rhythmic variance
sub voice0 { filter_pattern(5, $BPM, 400), 16 }
sub voice1 { filter_pattern(3, $BPM, 100), 16 }
sub voice2 { filter_pattern(7, $BPM, 800), 8 }

# delayed onsets for two of the voices
my $set = Music::RhythmSet->new->add(
    { next => \&voice0 },
    { next => \&voice1, pattern => $rest, ttl => 8 },
    { next => \&voice2, pattern => $rest, ttl => 16 },
);

$set->advance($measures);

# different notes for the different voices so they are easier to tell
# apart (they might instead use the same note and then the MIDI player
# could make them distinct by changing the instrument, etc)
$set->to_midi(
    $measures,
    chan    => 9,    # drum
    sustain => 0,
    track   => [ { note => 60 }, { note => 67 }, { note => 68 } ]
)->write_to_file($filename);

# show what the patterns are in each measure where a pattern changes
# (there are also text_event in the MIDI to help locate the rhythms
# should this script by accident produce something good)
$set->changes(
    divisor => $BPM,
    max     => $measures,
    header  => sub { say '# measure ' . $_[0] },
    voice   => sub {
        my ($mm, $id, $bp, $bs, $new, $repeat) = @_;
        # 'n' if there was a pattern change event for this voice, 'r' if
        # that change event did not actually change the pattern
        # (probably uncommon in this script)
        say join "\t", $id, $bs,
          ($new ? 'n' : '') . ($repeat ? 'r' : '');
    }
);
